package com.fishtank{	/* The objective of the game is to collect coins and avoid bombs.	We have 5 lives, when they are gone the game is over.	The angle of the phone will determine the speed of the character	*/		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;		import flash.events.TimerEvent;	import flash.utils.Timer;		import flash.events.AccelerometerEvent;	import flash.sensors.Accelerometer;	import flash.desktop.NativeApplication;	import flash.desktop.SystemIdleMode;		public class FishTank	{		// Main movie clip where all the game graphics are		private var main:MainMC;		// Amount of lives the user has		private var lives:int;		// How many coins the user has caught		private var coinsCaught:int;		// Timer for the fish bubbles		private var bubblesTimer:Timer;		// Timer for the coins 		private var coinAppearTimer:Timer;		// Timer for when bombs appear		private var bombAppearTimer:Timer;		// Defining the device accelerometer		private var accelerometer:Accelerometer;		// Direction of the player left or right		private var directionWas:String;		// Timer of the player 		private var fishAnimTimer:Timer;		// Mininum speed for the player		private var fishSpeed:uint = 1;		// Acceleration number passed by the device used to accelerate player		private var acceleration:Number;		// The mininum amount of acceleration sensitivity at which the player will start moving or it will stop		private const sensitivity:Number = 0.1;		// Is the gameover		private var isGameOver:Boolean;		// Sound for the coin		private var correctSound:CorrectMP3;		// Sound for the explosion		private var bombSound:BombMP3;				public function FishTank(mc:MovieClip)		{			// This is referring to the movie clip of our assests			// MainMC is linkage name			var main_mc:MainMC = new MainMC();			// We reference the main_mc to the main variable			main = main_mc;			// Add fish tank to stage			mc.addChild(main);						// Sounds			bombSound = new BombMP3();			correctSound = new CorrectMP3();						// Stop the fish animation			main.fish.stop();			// Hide fish			main.fish.visible = false;						// Click button to start the game			main.startScreen.startButton.addEventListener(MouseEvent.CLICK, StartGame);						if (Accelerometer.isSupported){				accelerometer = new Accelerometer();				accelerometer.addEventListener(AccelerometerEvent.UPDATE, OnAccelerometer);			}						// Create bubbles timer 			bubblesTimer = new Timer(rnd(3, 8) * 1000, 1);			bubblesTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnBubblesAnimTimer);						// Creates fish - every 20ms ensuring a smooth animation			fishAnimTimer = new Timer(20, 1);			fishAnimTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnFishAnimTimer);						// Creates coin - 1 new coin randomly at .5 to 5 seconds			coinAppearTimer = new Timer(rnd(1, 5) * 500, 1);			coinAppearTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnCoinAppearTimer);						// Creates bomb - new coin randomly at 1.5 to 3.5 seconds			bombAppearTimer = new Timer(rnd(3, 7) * 500, 1);			bombAppearTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnBombAppearTimer);						// Prevents the screen from dimming			NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;						// Caches our bitmap to make it run smoother			main.fish.cacheAsBitmap = true;						// Hides gameover screen			main.gameOverScreen.visible = false;		}				// Handler for the bomb appear timer		private function OnBombAppearTimer(event:TimerEvent)		{			// Creates bomb			CreateBomb();			// Set delay for bomb			bombAppearTimer.delay = rnd(3, 7) * 500;			// Starts the timer again as you want more bombs			bombAppearTimer.start();		}				// Handler for the coin appear timer		private function OnCoinAppearTimer(event:TimerEvent)		{			// Creates coin			CreateCoin();			// Creates delay 			coinAppearTimer.delay = rnd(1, 5) * 500;			// Start timer again			coinAppearTimer.start();		}				private function CreateCoin(){			var coin:Coin = new Coin();						coin.cacheAsBitmap = true;			main.addChild(coin);			coin.x = rnd(25, 455);						var coinTimer:Timer = new Timer(20, 1);			coinTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnTimer);			coinTimer.start();						// Coin timer will fire 50 times per second			// will perform animation, check for its			// also remove coin from screen			function OnTimer(event:TimerEvent)			{				// If the game is over were going to clean up				if (isGameOver == true){					Remove();				}								// If the game is running				if (isGameOver == false){					// Check to see if coin doesn't reaches end of screen					if (coin.y < 300){						// We will move 2 pixels at a time						coin.y += 2;												// Start the timer again						coinTimer.start();												// If the coin hits the fish, create a new starburst						// Add points to the coins caught						if (coin.hitTestObject(main.fish) == true)						{							var stars:StarBurst = new StarBurst();														main.addChild(stars);							stars.x = coin.x;							stars.y = coin.y														coinsCaught++;							main.caught.text = String(coinsCaught);														correctSound.play();														Remove();						}					}else{						// If the coin reaches the end of the screen, perform clean up						Remove();					}				}			}						// Remove the coin from screen and eventlistener			function Remove(){				// Checks to see if the time exists				if (coinTimer != null){					coinTimer.stop();					coinTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, OnTimer);					coinTimer = null;				}								// Checks to see if the main movie clip contains coin				if (main.contains(coin)){					main.removeChild(coin);				}			}		}				// Creates the bomb		private function CreateBomb(){			var bomb:Bomb = new Bomb();						// Add bomb to stage			bomb.cacheAsBitmap = true;			main.addChild(bomb);			bomb.x = rnd(25, 445);						// Bomb timer			var bombTimer:Timer = new Timer(20, 1);			bombTimer.addEventListener(TimerEvent.TIMER_COMPLETE, OnTimer);			bombTimer.start();						// Defines onTimer properties			function OnTimer(event:TimerEvent){				if (isGameOver == true){					Remove();				}								if (isGameOver == false){					if (bomb.y < 300){						// We move the bomb every 4 pixels each time event fires						// Twice as fast as coin						bomb.y += 4;						bombTimer.start();												if (bomb.hitTestObject(main.fish) == true){							var boom:Boom = new Boom();														main.addChild(boom);							boom.x = bomb.x;							boom.y = bomb.y;							bombSound.play();														lives--;														main.lives.text = String(lives);														if (lives == 0){								GameOver();								Remove();							}							Remove();						}					}else{						Remove();					}				}			}						function Remove(){				if (bombTimer != null){					bombTimer.stop();					bombTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, OnTimer);					bombTimer = null;				}				if (main.contains(bomb)){					main.removeChild(bomb);				}			}		}				private function OnBubblesAnimTimer(event:TimerEvent){			var bubbles:Bubbles = new Bubbles();						main.addChild(bubbles);						switch(directionWas){				case "left":					bubbles.x = main.fish.x - 50;					bubbles.y = main.fist.y + 10;					break;				case "right":					bubbles.x = main.fish.x + 50;					bubbles.y = main.fist.y + 10;					break;			}						// Delay bubbles between 3 and 8 seconds			bubblesTimer.delay = rnd(3, 8) * 1000;			bubblesTimer.start();		}				// Creates fish movement, fires every 50 seconds		private function OnFishAnimTimer(event:TimerEvent){			// We move the fish be increasing or decreasing x position			switch(directionWas){				// Checks to see if hit left side of screen				case "left":					if (main.fish.x > 50){						main.fish.x -= fishSpeed + (acceleration*25);					}					break;				// Checks to see if hight right side of screen				case "right":					if (main.fish.x < 430){						main.fish.x += fishSpeed - (acceleration*25);					}					break;			}						fishAnimTimer.start();		}				private function StartGame(Event:MouseEvent){			isGameOver = false;			main.gameOverScreen.visible = false;						coinsCaught = 0;			lives = 5;						main.caught.text = String(coinsCaught);			main.lives.text = String(lives);						main.startScreen.visible = false;						main.fish.play();			main.fish.visible = true;						fishAnimTimer.start();			bubblesTimer.start();						coinAppearTimer.start();			bombAppearTimer.start();						CreateCoin();			CreateBomb();		}				private function OnAccelerometer(event:AccelerometerEvent){			acceleration = event.accelerationX;						if (Number(event.accelerationX) < - sensitivity){				MoveRight();				main.fish.scaleX = -1;			}						if (Number(event.accelerationX) > sensitivity){				MoveLeft();				main.fish.scaleX = 1;			}		}				private function GameOver(){			isGameOver = true;						fishAnimTimer.stop();			bubblesTimer.stop();			coinAppearTimer.stop();			bombAppearTimer.stop();						main.fish.visible = false;			main.gameOverScreen.visible = true;			main.startScreen.visible = true;			main.gameOverScreen.coins.text = String(coinsCaught);		}				private function MoveRight(){			directionWas = "right";		}				private function MoveLeft(){			directionWas = "left";		}				private function rnd(min:Number, max:Number):Number{			var randomNum:Number = Math.floor(Math.random() * (max-min+1))+min;						return randomNum;		}	}}